import React, { useState, useEffect } from 'react';
import { Event, Entity, Tag } from '../../types';
import TimelineCanvas from '../timeline/TimelineCanvas';
import './Timeline.css';

type TimelineType = 'world' | 'chapter';

interface TimelineProps {
  currentProjectId: number | null;
}

const Timeline: React.FC<TimelineProps> = ({ currentProjectId }) => {
  const [timelineEvents, setTimelineEvents] = useState<Event[]>([]);
  const [entities, setEntities] = useState<Entity[]>([]);
  const [tags, setTags] = useState<Tag[]>([]);
  const [filteredEvents, setFilteredEvents] = useState<Event[]>([]);
  const [activeTimeline, setActiveTimeline] = useState<TimelineType>('world');
  const [filters, setFilters] = useState({
    entityType: 'all',
    tag: 'all',
    search: '',
  });
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (currentProjectId) {
      loadData();
    }
  }, [currentProjectId]);

  useEffect(() => {
    filterEvents();
  }, [timelineEvents, filters, activeTimeline]);

  const loadData = async () => {
    if (!currentProjectId) return;
    
    try {
      setLoading(true);
      const [entitiesData, tagsData] = await Promise.all([
        window.electronAPI.entity.getAll(currentProjectId),
        window.electronAPI.tag.getAll(currentProjectId),
      ]);
      
      setEntities(entitiesData);
      setTags(tagsData);
      
      // 从实体和事件中自动提取时间线事件
      const extractedEvents = extractTimelineEvents(entitiesData);
      setTimelineEvents(extractedEvents);
    } catch (error) {
      console.error('Failed to load timeline data:', error);
    } finally {
      setLoading(false);
    }
  };

  // 从实体数据中提取时间线事件
  const extractTimelineEvents = (entitiesData: Entity[]): Event[] => {
    const events: Event[] = [];
    
    entitiesData.forEach(entity => {
      // 从实体的自定义字段中提取时间信息
      if (entity.customFields) {
        const { 
          birthDate, 
          deathDate, 
          creationDate, 
          discoveryDate, 
          foundingDate, 
          dissolutionDate,
          firstAppearance,
          lastAppearance,
          importantEvents 
        } = entity.customFields;

        // 处理出生/创建/发现/成立日期
        const startDate = birthDate || creationDate || discoveryDate || foundingDate;
        if (startDate) {
          events.push({
            id: `entity-${entity.id}-start` as any,
            projectId: currentProjectId!,
            name: getStartEventName(entity),
            description: `${entity.name}的${getStartEventType(entity)}`,
            worldTime: startDate,
            relatedEntities: [entity.id!],
            tags: entity.tags || [],
            customFields: { 
              autoGenerated: true, 
              sourceEntity: entity.id,
              eventType: 'start'
            },
            createdAt: entity.createdAt,
            updatedAt: entity.updatedAt,
          });
        }

        // 处理死亡/销毁/解散日期
        const endDate = deathDate || dissolutionDate;
        if (endDate) {
          events.push({
            id: `entity-${entity.id}-end` as any,
            projectId: currentProjectId!,
            name: getEndEventName(entity),
            description: `${entity.name}的${getEndEventType(entity)}`,
            worldTime: endDate,
            relatedEntities: [entity.id!],
            tags: entity.tags || [],
            customFields: { 
              autoGenerated: true, 
              sourceEntity: entity.id,
              eventType: 'end'
            },
            createdAt: entity.createdAt,
            updatedAt: entity.updatedAt,
          });
        }

        // 处理首次/最后出现
        if (firstAppearance) {
          events.push({
            id: `entity-${entity.id}-first` as any,
            projectId: currentProjectId!,
            name: `${entity.name}首次出现`,
            description: `${entity.name}在故事中首次出现`,
            chapterNumber: typeof firstAppearance === 'number' ? firstAppearance : undefined,
            worldTime: typeof firstAppearance === 'string' ? firstAppearance : undefined,
            relatedEntities: [entity.id!],
            tags: entity.tags || [],
            customFields: { 
              autoGenerated: true, 
              sourceEntity: entity.id,
              eventType: 'firstAppearance'
            },
            createdAt: entity.createdAt,
            updatedAt: entity.updatedAt,
          });
        }

        if (lastAppearance) {
          events.push({
            id: `entity-${entity.id}-last` as any,
            projectId: currentProjectId!,
            name: `${entity.name}最后出现`,
            description: `${entity.name}在故事中最后出现`,
            chapterNumber: typeof lastAppearance === 'number' ? lastAppearance : undefined,
            worldTime: typeof lastAppearance === 'string' ? lastAppearance : undefined,
            relatedEntities: [entity.id!],
            tags: entity.tags || [],
            customFields: { 
              autoGenerated: true, 
              sourceEntity: entity.id,
              eventType: 'lastAppearance'
            },
            createdAt: entity.createdAt,
            updatedAt: entity.updatedAt,
          });
        }

        // 处理重要事件列表
        if (importantEvents && Array.isArray(importantEvents)) {
          importantEvents.forEach((event, index) => {
            if (event.name && (event.worldTime || event.chapterNumber)) {
              events.push({
                id: `entity-${entity.id}-event-${index}` as any,
                projectId: currentProjectId!,
                name: event.name,
                description: event.description || `与${entity.name}相关的重要事件`,
                worldTime: event.worldTime,
                chapterNumber: event.chapterNumber,
                relatedEntities: [entity.id!],
                tags: entity.tags || [],
                customFields: { 
                  autoGenerated: true, 
                  sourceEntity: entity.id,
                  eventType: 'important',
                  eventIndex: index
                },
                createdAt: entity.createdAt,
                updatedAt: entity.updatedAt,
              });
            }
          });
        }
      }
    });

    return events;
  };

  const getStartEventName = (entity: Entity): string => {
    switch (entity.type) {
      case 'character': return `${entity.name}出生`;
      case 'item': return `${entity.name}被创造`;
      case 'faction': return `${entity.name}成立`;
      case 'event': return `${entity.name}开始`;
      default: return `${entity.name}出现`;
    }
  };

  const getEndEventName = (entity: Entity): string => {
    switch (entity.type) {
      case 'character': return `${entity.name}死亡`;
      case 'item': return `${entity.name}被销毁`;
      case 'faction': return `${entity.name}解散`;
      case 'event': return `${entity.name}结束`;
      default: return `${entity.name}消失`;
    }
  };

  const getStartEventType = (entity: Entity): string => {
    switch (entity.type) {
      case 'character': return '出生';
      case 'item': return '创造';
      case 'faction': return '成立';
      case 'event': return '开始';
      default: return '出现';
    }
  };

  const getEndEventType = (entity: Entity): string => {
    switch (entity.type) {
      case 'character': return '死亡';
      case 'item': return '销毁';
      case 'faction': return '解散';
      case 'event': return '结束';
      default: return '消失';
    }
  };

  const filterEvents = () => {
    let filtered = timelineEvents;

    // 按时间线类型过滤
    if (activeTimeline === 'world') {
      filtered = filtered.filter(event => event.worldTime);
    } else {
      filtered = filtered.filter(event => event.chapterNumber !== undefined);
    }

    // 按搜索词过滤
    if (filters.search) {
      filtered = filtered.filter(event =>
        event.name.toLowerCase().includes(filters.search.toLowerCase()) ||
        (event.description && event.description.toLowerCase().includes(filters.search.toLowerCase()))
      );
    }

    // 按实体类型过滤
    if (filters.entityType !== 'all') {
      filtered = filtered.filter(event => {
        if (!event.relatedEntities || event.relatedEntities.length === 0) return false;
        return event.relatedEntities.some(entityId => {
          const entity = entities.find(e => e.id === entityId);
          return entity && entity.type === filters.entityType;
        });
      });
    }

    // 按标签过滤
    if (filters.tag !== 'all') {
      filtered = filtered.filter(event =>
        event.tags && event.tags.includes(filters.tag)
      );
    }

    setFilteredEvents(filtered);
  };

  const handleFilterChange = (key: string, value: string) => {
    setFilters(prev => ({
      ...prev,
      [key]: value,
    }));
  };

  const handleRefresh = () => {
    loadData();
  };

  if (!currentProjectId) {
    return (
      <div className="view-container">
        <div className="empty-state">
          <div className="empty-state-icon">📋</div>
          <div className="empty-state-title">请选择项目</div>
          <div className="empty-state-description">
            选择一个项目来查看时间线
          </div>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="view-container">
        <div className="loading">加载中...</div>
      </div>
    );
  }

  return (
    <div className="view-container timeline-view">
      <div className="view-header">
        <h1 className="view-title">时间线</h1>
        <p className="view-subtitle">从实体信息自动生成的时间线视图</p>
        <div className="view-actions">
          <button className="btn btn-secondary" onClick={handleRefresh}>
            🔄 刷新时间线
          </button>
        </div>
      </div>

      {/* 时间线切换和筛选器 */}
      <div className="timeline-controls">
        <div className="timeline-tabs">
          <button
            className={`timeline-tab ${activeTimeline === 'world' ? 'active' : ''}`}
            onClick={() => setActiveTimeline('world')}
          >
            🌍 世界时间线
          </button>
          <button
            className={`timeline-tab ${activeTimeline === 'chapter' ? 'active' : ''}`}
            onClick={() => setActiveTimeline('chapter')}
          >
            📖 章节时间线
          </button>
        </div>

        <div className="timeline-filters">
          <input
            type="text"
            className="input search-input"
            placeholder="搜索事件..."
            value={filters.search}
            onChange={(e) => handleFilterChange('search', e.target.value)}
          />
          
          <select
            className="input"
            value={filters.entityType}
            onChange={(e) => handleFilterChange('entityType', e.target.value)}
          >
            <option value="all">所有实体类型</option>
            <option value="character">人物</option>
            <option value="item">物品</option>
            <option value="faction">势力</option>
            <option value="event">事件</option>
          </select>

          <select
            className="input"
            value={filters.tag}
            onChange={(e) => handleFilterChange('tag', e.target.value)}
          >
            <option value="all">所有标签</option>
            {tags.map(tag => (
              <option key={tag.id} value={tag.name}>{tag.name}</option>
            ))}
          </select>
        </div>
      </div>

      {/* 时间线可视化区域 */}
      <div className="timeline-content">
        {filteredEvents.length > 0 ? (
          <TimelineCanvas
            events={filteredEvents}
            entities={entities}
            tags={tags}
            timelineType={activeTimeline}
            onEventClick={() => {}} // 自动生成的事件不可编辑
            onEventDelete={() => {}} // 自动生成的事件不可删除
          />
        ) : (
          <div className="empty-state">
            <div className="empty-state-icon">⏰</div>
            <div className="empty-state-title">
              {activeTimeline === 'world' ? '世界时间线为空' : '章节时间线为空'}
            </div>
            <div className="empty-state-description">
              {filters.search || filters.entityType !== 'all' || filters.tag !== 'all'
                ? '没有找到符合条件的事件'
                : `在实体管理中添加包含时间信息的实体，时间线将自动生成`
              }
            </div>
            <div className="empty-state-help">
              <p>💡 提示：在实体的自定义字段中添加以下信息来生成时间线事件：</p>
              <ul>
                <li><strong>人物：</strong>birthDate（出生日期）、deathDate（死亡日期）</li>
                <li><strong>物品：</strong>creationDate（创造日期）、discoveryDate（发现日期）</li>
                <li><strong>势力：</strong>foundingDate（成立日期）、dissolutionDate（解散日期）</li>
                <li><strong>通用：</strong>firstAppearance（首次出现）、lastAppearance（最后出现）</li>
                <li><strong>重要事件：</strong>importantEvents（重要事件列表）</li>
              </ul>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Timeline;

